{
	"info": {
		"_postman_id": "56c96dd4-e83e-4f9b-9c40-d7439b46709f",
		"name": "Postman. Task_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17399053"
	},
	"item": [
		{
			"name": "First Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body has right string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3 Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonDataResp = pm.response.json();\r",
							"\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name's request (name вбить руками.)\r",
							"let nameRequest = \"Kate\";\r",
							"pm.test(\"Response's Name eql request's Name\", function () {\r",
							"        pm.expect(jsonDataResp.name).to.eql(nameRequest);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age's request (age вбить руками.)\r",
							"let ageRequest = \"26\";\r",
							"pm.test(\"Response's Age eql request's Age\", function () {\r",
							"        pm.expect(jsonDataResp.age).to.eql(ageRequest);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary's request (salary вбить руками.)\r",
							"let salaryRequest = 2900;\r",
							"pm.test(\"Response's Salary eql request's Salary\", function () {\r",
							"        pm.expect(jsonDataResp.salary).to.eql(salaryRequest);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let jsonDataReq = request.data\r",
							"\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name's request (name забрать из request.)\r",
							"pm.test(\"Response's Name eql request's Name with parsed request data\", function () {\r",
							"        pm.expect(jsonDataResp.name).to.eql(jsonDataReq.name);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age's request (age забрать из request.)\r",
							"pm.test(\"Response's Age eql request's Age with parsed request data\", function () {\r",
							"        pm.expect(jsonDataResp.age).to.eql(jsonDataReq.age);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary's request (salary забрать из request.)\r",
							"pm.test(\"Response's Salary eql request's Salary with parsed request data\", function () {\r",
							"        pm.expect(jsonDataResp.salary).to.eql+(jsonDataReq.salary);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonDataResp.family)\r",
							"\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year eql salary * 4\", function () {\r",
							"        pm.expect(jsonDataResp.family.u_salary_1_5_year).to.eql(jsonDataReq.salary*4);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2900",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3 Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"let jsonDataResp = pm.response.json();\r",
							"let jsonDataReq = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name's request (name забрать из request.)\r",
							"pm.test(\"Response's Name eql request's Name\", function () {\r",
							"        pm.expect(jsonDataResp.name).to.eql(jsonDataReq.name);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age's request (age забрать из request.)\r",
							"pm.test(\"Response's Age eql request's Age\", function () {\r",
							"        pm.expect(jsonDataResp.age).to.eql(jsonDataReq.age);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary's request (salary забрать из request.)\r",
							"pm.test(\"Response's Salary eql request's Salary\", function () {\r",
							"        pm.expect(jsonDataResp.salary).to.eql+(jsonDataReq.salary);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonDataResp.family)\r",
							"\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let dogProperty = jsonDataResp.family.pets.dog\r",
							"\r",
							"pm.test(\"Dog property has Name property\", function () {\r",
							"    pm.expect(dogProperty).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog property has Age property\", function () {\r",
							"    pm.expect(dogProperty).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog.name property has Lucky value\", function () {\r",
							"    pm.expect(dogProperty.name).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog.age property has 4 value\", function () {\r",
							"    pm.expect(dogProperty.age).to.include+(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kate&age=26&salary=2900",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "2900"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4 Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"// 4. Спарсить request.\r",
							"let jsonDataResp = pm.response.json();\r",
							"let jsonDataReq = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name's request (name забрать из request)\r",
							"pm.test(\"Response's Name eql request's Name\", function () {\r",
							"        pm.expect(jsonDataResp.name).to.eql(jsonDataReq.name);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Response's Age eql request's Age\", function () {\r",
							"        pm.expect(jsonDataResp.age).to.eql+(jsonDataReq.age);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"console.log(jsonDataReq.salary)\r",
							"console.log(jsonDataResp.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(jsonDataResp.salary[0])\r",
							"console.log(jsonDataResp.salary[1])\r",
							"console.log(jsonDataResp.salary[2])\r",
							"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Response's Salary [0] eql request's Salary\", function () {\r",
							"        pm.expect(jsonDataResp.salary[0]).to.eql+(jsonDataReq.salary);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Response's Salary [1] eql request's Salary * 2\", function () {\r",
							"        pm.expect(jsonDataResp.salary[1]).to.eql+(jsonDataReq.salary*2);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Response's Salary [2] eql request's Salary * 3\", function () {\r",
							"        pm.expect(jsonDataResp.salary[2]).to.eql+(jsonDataReq.salary*3);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"name\", \"Kate\");\r",
							"pm.environment.set(\"age\", \"26\");\r",
							"pm.environment.set(\"salary\", \"2900\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (i=0; i<jsonDataResp.salary[i]; i++) {\r",
							"    console.log(jsonDataResp.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2 Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Спарсить response body в json\r",
							"// 7. Спарсить request\r",
							"let jsonDataResp = pm.response.json();\r",
							"let jsonDataReq = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has start_qa_salary property\", function () {\r",
							"    pm.expect(jsonDataResp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has qa_salary_after_6_months property\", function () {\r",
							"    pm.expect(jsonDataResp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has qa_salary_after_12_months property\", function () {\r",
							"    pm.expect(jsonDataResp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has qa_salary_after_1.5_year property\", function () {\r",
							"    pm.expect(jsonDataResp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has qa_salary_after_3.5_years property\", function () {\r",
							"    pm.expect(jsonDataResp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has person property\", function () {\r",
							"    pm.expect(jsonDataResp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Property start_qa_salary eql request's property salary\", function () {\r",
							"        pm.expect(jsonDataResp.start_qa_salary).to.eql+(jsonDataReq.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Property qa_salary_after_6_months eql request's property salary * 2\", function () {\r",
							"        pm.expect(jsonDataResp.qa_salary_after_6_months).to.eql+(jsonDataReq.salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Property qa_salary_after_12_months eql request's property salary * 2.7\", function () {\r",
							"        pm.expect(jsonDataResp.qa_salary_after_6_months).to.eql+(jsonDataReq.salary*2.7);\r",
							"});\r",
							"\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Property qa_salary_after_1.5_year eql request's property salary * 3.3\", function () {\r",
							"        pm.expect(jsonDataResp.qa_salary_after_6_months).to.eql+(jsonDataReq.salary*3.3);\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Property qa_salary_after_3.5_year eql request's property salary * 3.8\", function () {\r",
							"        pm.expect(jsonDataResp.qa_salary_after_6_months).to.eql+(jsonDataReq.salary*3.8);\r",
							"});\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"Property person.u_name [1] eql request's property salary\", function () {\r",
							"        pm.expect(jsonDataResp.person.u_name).to.eql+(jsonDataReq.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"Property u_age eql request's property u_age\", function () {\r",
							"        pm.expect(jsonDataResp.person.u_age).to.eql+(jsonDataReq.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Property u_salary_5_years eql request's property salary * 4.2\", function () {\r",
							"        pm.expect(jsonDataResp.person.u_salary_5_years).to.eql+(jsonDataReq.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// 22. *** Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let elements in jsonDataResp.person)\r",
							"console.log(elements + \" \" + jsonDataResp.person[elements])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}